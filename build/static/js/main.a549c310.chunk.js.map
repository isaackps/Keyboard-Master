{"version":3,"sources":["Components/CountDownTimer/CountDownTimer.tsx","Components/InputBar/InputBar.tsx","Components/ScoreBox/ScoreBox.tsx","Components/ScorePopup/ScorePopup.tsx","Pages/HomePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CountDownTimer","startTimer","setStartTimer","setDisplayPopup","internalClock","setInternalClock","resetTimer","setResetTimer","useState","circleDasharray","setCircleDasharray","remainingColorPath","setRemainingColorPath","useEffect","timer","timeLeft","setRemainingPathColor","clearTimer","clearTimeout","setTimeout","rawTimeFraction","calculateTimeFraction","toFixed","className","viewBox","xmlns","cx","cy","r","id","strokeDasharray","d","InputBar","words","wordsPerMin","setWordsPerMin","charsPerMin","setCharsPerMin","totalNumberOfWordsTyped","setTotalNumberOfWordsTyped","resetInput","setResetInput","displayPopup","caretRef","useRef","wordsArray","setWordsArray","masterList","setMasterList","typedWord","setTypedWord","typedWords","setTypedWords","currentWord","setCurrentWord","displayCurrentWord","setDisplayCurrentWord","WordsArrayFrom2ndWordsOnwards","splice","wordsToBeTyped","current","innerText","blur","onClick","focus","map","i","index","onFocus","e","el","target","document","createRange","window","selection","getSelection","range","setStart","childNodes","length","collapse","removeAllRanges","addRange","ref","style","caretColor","contentEditable","tabIndex","autoCorrect","autoCapitalize","spellCheck","onKeyDown","event","key","preventDefault","generateRandomWord","randomWords","typingWordWithBackspaced","slice","typingCheck","RegExp","test","substring","listOfKeys","includes","typingWord","word","ScoreBox","children","title","ScorePopup","resetTest","accuracy","HomePage","randomW","setWords","newWords","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a549c310.chunk.js","sourcesContent":["import { FunctionComponent, useEffect, useState } from \"react\";\nimport \"./CountDownTimer.css\";\n\ninterface CountDownTimerProps {\n  startTimer: boolean;\n  setStartTimer: (startTimer: boolean) => void;\n  setDisplayPopup: (displayPopup: boolean) => void;\n  internalClock: number;\n  setInternalClock: (clock: number) => void;\n  resetTimer: boolean;\n  setResetTimer: (resetTimer: boolean) => void;\n}\n\nexport const CountDownTimer: FunctionComponent<CountDownTimerProps> = ({\n  startTimer,\n  setStartTimer,\n  setDisplayPopup,\n  internalClock,\n  setInternalClock,\n  resetTimer,\n  setResetTimer,\n}) => {\n  const TIME_LIMIT = 60;\n  const FULL_DASH_ARRAY = 283;\n  const WARNING_THRESHOLD = 10;\n  const ALERT_THRESHOLD = 5;\n  const [circleDasharray, setCircleDasharray] = useState(\"283 283\");\n  const [remainingColorPath, setRemainingColorPath] = useState(\n    \"text-green-400\"\n  );\n\n  useEffect(() => {\n    const timeLeft = TIME_LIMIT - internalClock;\n\n    const calculateTimeFraction = () => {\n      if (timeLeft > 1) {\n        const rawTimeFraction = (timeLeft - 1) / TIME_LIMIT;\n        return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);\n      }\n      return 0;\n    };\n\n    const calculateTimeLeft = () => {\n      if (timeLeft > 0) {\n        setInternalClock(internalClock + 1);\n      } else {\n        setStartTimer(false);\n        setDisplayPopup(true);\n      }\n    };\n\n    const setRemainingPathColor = () => {\n      if (timeLeft <= ALERT_THRESHOLD) {\n        setRemainingColorPath(\"text-red-500\");\n      } else if (timeLeft <= WARNING_THRESHOLD && timeLeft > ALERT_THRESHOLD) {\n        setRemainingColorPath(\"text-yellow-500\");\n      } else {\n        setRemainingColorPath(\"text-green-400\");\n      }\n    };\n\n    const clearTimer = () => {\n      return () => clearTimeout(timer);\n    };\n\n    let timer: any;\n    if (startTimer) {\n      timer = setTimeout(() => {\n        calculateTimeLeft();\n        setCircleDasharray(\n          `${(calculateTimeFraction() * FULL_DASH_ARRAY).toFixed(0)} 283`\n        );\n        setRemainingPathColor();\n      }, 1000);\n\n      return clearTimer();\n    } else {\n      clearTimer();\n    }\n\n    if (resetTimer) {\n      setResetTimer(false);\n      setRemainingPathColor();\n      setCircleDasharray(`283 283`);\n      setRemainingColorPath(\"text-green-400\");\n    }\n  }, [\n    startTimer,\n    TIME_LIMIT,\n    internalClock,\n    setStartTimer,\n    setDisplayPopup,\n    setInternalClock,\n    resetTimer,\n    setResetTimer,\n  ]);\n\n  return (\n    <div className=\"base-timer\">\n      <svg\n        className=\"base-timer__svg\"\n        viewBox=\"0 0 100 100\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g className=\"base-timer__circle\">\n          <circle className=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\" />\n          <path\n            id=\"base-timer-path-remaining\"\n            strokeDasharray={circleDasharray}\n            className={`base-timer__path-remaining ${remainingColorPath}`}\n            d=\"\n          M 50, 50\n          m -45, 0\n          a 45,45 0 1,0 90,0\n          a 45,45 0 1,0 -90,0\n        \"\n          ></path>\n        </g>\n      </svg>\n      <div className=\"flex flex-col base-timer__label\">\n        <span id=\"base-timer-label\" className=\"\">\n          {TIME_LIMIT - internalClock}\n        </span>\n        <span className=\"text-sm font-extralight\">seconds</span>\n      </div>\n    </div>\n  );\n};\n","import randomWords from \"random-words\";\nimport { FunctionComponent, useEffect, useRef, useState } from \"react\";\n\ninterface InputBarProps {\n  words: string[];\n  wordsPerMin: number;\n  setWordsPerMin: (wordsPerMin: number) => void;\n  charsPerMin: number;\n  setCharsPerMin: (charsPerMin: number) => void;\n  totalNumberOfWordsTyped: number;\n  setTotalNumberOfWordsTyped: (wordsTyped: number) => void;\n  startTimer: boolean;\n  setStartTimer: (startTimer: boolean) => void;\n  resetInput: boolean;\n  setResetInput: (resetInput: boolean) => void;\n  displayPopup: boolean;\n}\n\nexport const InputBar: FunctionComponent<InputBarProps> = ({\n  words,\n  wordsPerMin,\n  setWordsPerMin,\n  charsPerMin,\n  setCharsPerMin,\n  totalNumberOfWordsTyped,\n  setTotalNumberOfWordsTyped,\n  startTimer,\n  setStartTimer,\n  resetInput,\n  setResetInput,\n  displayPopup,\n}) => {\n  const caretRef = useRef<HTMLDivElement>(null);\n\n  const caretFocus = () => {\n    if (null !== caretRef.current) {\n      caretRef.current.focus();\n    }\n  };\n\n  const moveCursorToEnd = (el: any) => {\n    if (el.innerText && document.createRange) {\n      window.setTimeout(() => {\n        let selection = document.getSelection();\n        let range = document.createRange();\n\n        range.setStart(el.childNodes[0], el.innerText.length);\n        range.collapse(true);\n        if (selection) {\n          selection.removeAllRanges();\n          selection.addRange(range);\n        }\n      }, 1);\n    }\n  };\n\n  const [wordsArray, setWordsArray] = useState([...words]);\n  const [masterList, setMasterList] = useState([...words]);\n  const [typedWord, setTypedWord] = useState(\"\");\n  const [typedWords, setTypedWords] = useState<string[]>([]);\n  const [currentWord, setCurrentWord] = useState(wordsArray[0]);\n  const [displayCurrentWord, setDisplayCurrentWord] = useState(currentWord);\n  const clonedWordsArray = [...wordsArray];\n  const WordsArrayFrom2ndWordsOnwards = clonedWordsArray.splice(1);\n  const wordsToBeTyped = [displayCurrentWord, ...WordsArrayFrom2ndWordsOnwards];\n\n  useEffect(() => {\n    setCurrentWord(wordsArray[0]);\n    setDisplayCurrentWord(wordsArray[0]);\n  }, [wordsArray]);\n\n  useEffect(() => {\n    if (resetInput) {\n      setWordsArray([...words]);\n      setMasterList([...words]);\n      setTypedWord(\"\");\n      setTypedWords([]);\n      setResetInput(false);\n      if (null !== caretRef.current) {\n        caretRef.current.innerText = \"\";\n      }\n    }\n  }, [\n    resetInput,\n    setResetInput,\n    setWordsArray,\n    setMasterList,\n    setTypedWord,\n    setTypedWords,\n    words,\n  ]);\n\n  useEffect(() => {\n    if (null !== caretRef.current && displayPopup) {\n      caretRef.current.blur();\n    }\n  }, [displayPopup]);\n\n  const typing = (event: any) => {\n    if (!startTimer) {\n      setStartTimer(true);\n    }\n    if (event.key === \" \" || event.key === \"Enter\") {\n      event.preventDefault();\n      setTotalNumberOfWordsTyped(totalNumberOfWordsTyped + 1);\n      if (typedWord) {\n        setTypedWords([...typedWords, typedWord]);\n        setTypedWord(\"\");\n        event.target.innerText = \"\";\n        const generateRandomWord = randomWords(1) as string[];\n        setWordsArray([...wordsArray.splice(1), ...generateRandomWord]);\n        setMasterList([...masterList, ...generateRandomWord]);\n        if (typedWord === currentWord) {\n          setWordsPerMin(wordsPerMin + 1);\n          setCharsPerMin(charsPerMin + typedWord.length);\n        }\n      }\n    } else if (event.key === \"Backspace\") {\n      const typingWordWithBackspaced = typedWord.slice(0, -1);\n      const regex = new RegExp(`^${typingWordWithBackspaced}`, \"i\");\n      const typingCheck = regex.test(currentWord);\n\n      event.target.className = !typingCheck\n        ? \"focus:outline-none focus:shadow-none pl-1 w-0 line-through text-red-400\"\n        : \"focus:outline-none focus:shadow-none pl-1 w-0\";\n\n      if (displayCurrentWord.length + typedWord.length <= currentWord.length) {\n        setDisplayCurrentWord(currentWord.substring(typedWord.length - 1));\n      }\n      setTypedWord(typingWordWithBackspaced);\n    } else if (listOfKeys.includes(event.key)) {\n      const typingWord = `${typedWord}${event.key}`;\n      const regex = new RegExp(`^${typingWord}`, \"i\");\n      const typingCheck = regex.test(currentWord);\n      event.target.className = !typingCheck\n        ? \"focus:outline-none focus:shadow-none pl-1 w-0 line-through text-red-400\"\n        : \"focus:outline-none focus:shadow-none pl-1 w-0\";\n\n      setTypedWord(typingWord);\n      if (event.key === displayCurrentWord[0]) {\n        setDisplayCurrentWord(displayCurrentWord.substring(1));\n      }\n    }\n  };\n\n  const checkWord = (index: number): string => {\n    return typedWords[index] === masterList[index]\n      ? \"text-green-300\"\n      : \"text-yellow-400 line-through\";\n  };\n\n  return (\n    <div className=\"w-screen max-w-7xl flex justify-center my-24\">\n      <div\n        className=\"bg-white rounded shadow-lg w-1/2 h-20 relative text-3xl flex items-center cursor-text inline-block\"\n        onClick={() => caretFocus()}\n      >\n        <div className=\"w-1/2 overflow-hidden\">\n          <div className=\"float-right whitespace-nowrap text-right flex font-serif text-gray-400\">\n            {typedWords.map((words: string, i: number) => (\n              <span className={`mr-4 ${checkWord(i)}`} key={i}>\n                {words}\n              </span>\n            ))}\n            <div\n              id=\"input-bar\"\n              onFocus={(e) => moveCursorToEnd(e.target)}\n              ref={caretRef}\n              className={`focus:outline-none focus:shadow-none pl-1 w-0`}\n              style={{ caretColor: \"black\" }}\n              contentEditable={!displayPopup}\n              tabIndex={1}\n              autoCorrect=\"off\"\n              autoCapitalize=\"off\"\n              spellCheck=\"false\"\n              onKeyDown={typing}\n            />\n          </div>\n        </div>\n        <div className=\"w-1/2 outline-none overflow-hidden inline\">\n          {wordsToBeTyped.map((word: string, i: number) => {\n            return (\n              <span key={i} className=\"font-serif mr-4\">\n                {word}\n              </span>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst listOfKeys = [\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"0\",\n  \"-\",\n  \"=\",\n  \"!\",\n  \"@\",\n  \"#\",\n  \"$\",\n  \"%\",\n  \"^\",\n  \"&\",\n  \"*\",\n  \"(\",\n  \")\",\n  \"_\",\n  \"+\",\n  \"[\",\n  \"]\",\n  \"{\",\n  \"}\",\n  \";\",\n  \":\",\n  \"'\",\n  '\"',\n  \",\",\n  \"<\",\n  \".\",\n  \">\",\n  \"/\",\n  \"?\",\n];\n","import { FunctionComponent } from \"react\";\n\ninterface ScoreBoxProps {\n  title: string;\n}\n\nexport const ScoreBox: FunctionComponent<ScoreBoxProps> = ({\n  children,\n  title,\n}) => {\n  return (\n    <div className=\"flex flex-col items-center mr-8\">\n      <div className=\"rounded-lg bg-white h-24 w-24 flex items-center justify-center font-bold text-4xl\">\n        {children}\n      </div>\n      <div className=\"mt-2 font-light\">{title}</div>\n    </div>\n  );\n};\n","import { FunctionComponent } from \"react\";\nimport { X } from \"react-feather\";\n\ninterface ScorePopupProps {\n  resetTest: () => void;\n  wordsPerMin: number;\n  charsPerMin: number;\n  accuracy: number;\n}\n\nexport const ScorePopup: FunctionComponent<ScorePopupProps> = ({\n  resetTest,\n  wordsPerMin,\n  charsPerMin,\n  accuracy,\n}) => {\n  return (\n    <div className=\"absolute top-0 left-0 w-screen h-screen z-10 flex items-center justify-center\">\n      <div className=\"relative w-1/2 max-w-3xl h-96 bg-white rounded-lg z-20 flex flex-col items-center justify-center shadow-xl\">\n        <div\n          className=\"absolute top-0 right-0 m-4 cursor-pointer\"\n          onClick={resetTest}\n        >\n          <X className=\"text-grey-600\" />\n        </div>\n        <div className=\"flex flex-col mb-12\">\n          <div className=\"text-2xl mb-4\">WOW! You typed:</div>\n          <div className=\"text-md ml-16 mb-1\">\n            <span className=\"text-blue-500 font-bold text-3xl\">\n              {wordsPerMin}\n            </span>{\" \"}\n            words/min\n          </div>\n          <div className=\"text-md ml-16 mb-1\">\n            <span className=\"text-blue-500 font-bold text-3xl\">\n              {charsPerMin}\n            </span>{\" \"}\n            characters/min\n          </div>\n          <div className=\"text-md ml-16 mb-1\">\n            <span className=\"text-blue-500 font-bold text-3xl\">{accuracy}</span>{\" \"}\n            % accuracy\n          </div>\n        </div>\n        <button\n          className=\"bg-green-500 rounded py-2 px-4 text-white text-2xl shadow-md\"\n          onClick={resetTest}\n        >\n          Try again\n        </button>\n      </div>\n      <div className=\"bg-black opacity-50 w-screen h-screen absolute\" />\n    </div>\n  );\n};\n","import randomWords from \"random-words\";\nimport { FunctionComponent, useState } from \"react\";\nimport { CountDownTimer } from \"../Components/CountDownTimer\";\nimport { InputBar } from \"../Components/InputBar\";\nimport { ScoreBox } from \"../Components/ScoreBox\";\nimport { ScorePopup } from \"../Components/ScorePopup\";\n\nexport const HomePage: FunctionComponent = () => {\n  const [wordsPerMin, setWordsPerMin] = useState(0);\n  const [totalNumberOfWordsTyped, setTotalNumberOfWordsTyped] = useState(0);\n  const [charsPerMin, setCharsPerMin] = useState(0);\n  const [startTimer, setStartTimer] = useState(false);\n  const [displayPopup, setDisplayPopup] = useState(false);\n  const [internalClock, setInternalClock] = useState(0);\n  const randomW = randomWords(5);\n  const [words, setWords] = useState(\n    typeof randomW === \"string\" ? [randomW] : randomW\n  );\n  const [resetTimer, setResetTimer] = useState(false);\n  const [resetInput, setResetInput] = useState(false);\n\n  const resetTest = () => {\n    setWordsPerMin(0);\n    setTotalNumberOfWordsTyped(0);\n    setCharsPerMin(0);\n    setInternalClock(0);\n    setStartTimer(false);\n    setDisplayPopup(false);\n    const newWords = randomWords(5) as string[];\n    setWords(newWords);\n    setResetTimer(true);\n    setResetInput(true);\n  };\n\n  const accuracy = ~~((wordsPerMin / totalNumberOfWordsTyped) * 100);\n  return (\n    <div className=\"bg-gray-100\">\n      <div className=\"relative\">\n        {displayPopup && (\n          <ScorePopup\n            resetTest={resetTest}\n            wordsPerMin={wordsPerMin}\n            charsPerMin={charsPerMin}\n            accuracy={accuracy}\n          />\n        )}\n        <div className=\"container flex items-center justify-center h-screen\">\n          <div className=\"flex flex-col items-center\">\n            <p className=\"font-mono text-sm font-thin text-gray-600 pb-4 uppercase\">\n              Speed Typing Test\n            </p>\n            <h1 className=\"text-6xl font-bold\">Test your typing skills</h1>\n            <p className=\"text-md font-extralight text-gray-600 pt-4\">\n              Become the Keyboard Master\n            </p>\n            <InputBar\n              words={words}\n              wordsPerMin={wordsPerMin}\n              setWordsPerMin={setWordsPerMin}\n              charsPerMin={charsPerMin}\n              setCharsPerMin={setCharsPerMin}\n              totalNumberOfWordsTyped={totalNumberOfWordsTyped}\n              setTotalNumberOfWordsTyped={setTotalNumberOfWordsTyped}\n              startTimer={startTimer}\n              setStartTimer={setStartTimer}\n              resetInput={resetInput}\n              setResetInput={setResetInput}\n              displayPopup={displayPopup}\n            />\n            <div className=\"flex m-8\">\n              <ScoreBox title=\"words/min\">{wordsPerMin}</ScoreBox>\n              <ScoreBox title=\"chars/min\">{charsPerMin}</ScoreBox>\n              <ScoreBox title=\"% accuracy\">{accuracy}</ScoreBox>\n              <CountDownTimer\n                startTimer={startTimer}\n                setStartTimer={setStartTimer}\n                setDisplayPopup={setDisplayPopup}\n                internalClock={internalClock}\n                setInternalClock={setInternalClock}\n                resetTimer={resetTimer}\n                setResetTimer={setResetTimer}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { HomePage } from \"./Pages/HomePage\";\n\nfunction App() {\n  return <HomePage />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}